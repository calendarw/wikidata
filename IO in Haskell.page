## Lazy IO

The default approach to IO in Haskell, part of [`System.IO`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/System-IO.html) (`hGetContents`, `hPutStr` etc.). Criticised for lack of control over resource usage. However, Andres Löh said it might be OK for simple network apps.

## Iteratees

Concept by [Oleg Kiselyov](http://okmij.org/ftp/Streams.html), meant to address difficulties in reasoning about resource usage that plague lazy IO. Difficult to understand, although the [HaskellWiki page](http://www.haskell.org/haskellwiki/Iteratee_I/O) looks promising. There is a couple of implementations on Hackage. 

* [Hoodlums homework](https://gist.github.com/mmakowski/1397756)

## Pipes

* [Tutorial](http://hackage.haskell.org/packages/archive/pipes/4.0.0/doc/html/Pipes-Tutorial.html)
* [Oliver Charles's LHUG talk](Pipes)

## Conduits 

[Tutorial](https://www.fpcomplete.com/user/snoyberg/library-documentation/conduit-overview)

## IO Streams

Released in [March 2013](http://snapframework.com/blog/2013/03/05/announcing-io-streams) by the authors of Snap web framework. Advertised as simple and efficient. 

Criticised by Paul Chiusano:

<blockquote class="twitter-tweet" data-conversation="none"><p>@<a href="https://twitter.com/pelotom">pelotom</a> They decided existing stream processing libraries too complex but then just implemented something ad hoc and specialized to IO!</p>— Paul Chiusano (@pchiusano) <a href="https://twitter.com/pchiusano/status/309225338842513408">March 6, 2013</a></blockquote>

## References

* [Edsko de Vries's talk](Alternatives to Lazy IO in Haskell)

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>