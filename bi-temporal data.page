---
categories: it database
...
Example: stock price that changes continuously. 

## Non-temporal

Simplest storage schema: 

+--------+---------+
| ticker | price   |
+========+=========+
| BARC.L | 223.75  |
+--------+---------+

`ticker` is the primary key. Whenever a new piece of data arrives, the price is overwritten. This means historical querying is impossible; if we wanted to know what the price was yesterday noon, we won't be able to tell.

## (Uni-)Temporal

+--------+--------------------------+---------+
| ticker | timestamp                | price   |
+========+==========================+=========+
| BARC.L | 2012-09-21T16:35:00.000Z | 223.75  |
+--------+--------------------------+---------+

`timestamp` shows the time when fact was observed and is added to the primary key. We can now tell what the historical price was by ordering the records by timestamp and for a given time finding the record with larges timestamp that is less then the time asked for. In practice the start and end of the validity period is recorded:

+--------+--------------------------+--------------------------+---------+
| ticker | start_ts                 | end_ts                   | price   |
+========+==========================+==========================+=========+
| BARC.L | 2012-09-21T16:35:00.000Z | 9999-12-31T23:59:59.999Z | 223.75  |
+--------+--------------------------+--------------------------+---------+

`end_ts` is not a part of primary key, but allows to easily express a historical data query in SQL: 

~~~ {.sql}
SELECT price FROM stock_prices 
WHERE 
  ticker    = 'BARC.L'
  start_ts >= :query_time AND 
  end_ts    < :query_time
~~~

at the cost of making updates slightly more complicated: whenever a new fact is recorded, the currently-valid record needs to be found and have its `end_ts` udpated to be the same as `start_ts` of the newly-observed value. Typically a certain time far in the future is chosen to represent "forever", i.e. the latest known fact; in our example it's 9999-12-31T23:59:59.999Z.

This schema makes it possible to query for historical data. It is important to note, however, that the `start_ts` and `end_ts` represent real-world observation times, not the times the data was recorded in the database. For example, the price we have in the database was valid on the market as of 16:35, but we might have recorded it in our database only as of 16:42. If we tried to price a position in Barclays shares at 16:40 using the price data from the database, we would have used a stale price; if someone then wondered at 17:00 how that price was calculated, we would not be able to explain this. In short, our database does not support auditing use-case: responding to queries that ask what the system knew as of a given point in time.

## Bi-temporal

TODO

- transactional timeline and PKs?
- milestoning/slicing