## Lenses

_SPJ_

* it's more fun to talk about things I don't know about
* only learned about it in the last couple of weeks
* discussed with Ed Kmett at ICFP

### What are lenses?

* `Lens` gives access to a particular piece of a data structure

~~~ {.haskell}
Lens DateTime Mins
Lens DateTime Hours
~~~

* composable (structure inside a structure): `composeL`
* why do we want this? For working with nested records:

~~~ {.haskell}
data Person = P {... addr :: Address ...}
data Address = A {... postcode: String ...}

setPostcode :: String -> Person
setPostcode pc p = p { addr = addr p { postcode = pc }}
~~~

With lens:

~~~ {.haskell}
view :: Lens' s a -> s -> a
set :: Lens' s a -> a -> s -> s
~~~

### How could we implement it? 

E.g. by having `viewR` and `setR` as members of lens:

~~~ {.haskell}
data LensR = L { viewR :: s -> a
               , setR :: a -> s -> s}

composeL (L v1 u1) (L v2 u2)
  = L (\s -> v (v1 s))
      (\a s -> u1 (u2 a (v1 s)) s)
~~~

But that would be inefficient if we wanted to do an update:

~~~ {.haskell}
over :: LensR s a -> (a -> a) -> s -> s
~~~

How do we fix it?

~~~ {.haskell}
L { viewR :: s -> a
  , setR :: a -> s -> s}
  , mod :: (a -> a) -> s -> s
  , modM :: (a -> Maybe a) -> s -> Maybe s
  , modIO :: (a -> IO a) -> s -> IO s
  }
~~~

need a lot of specialised functions -- where do we stop? Let's generalise:

~~~ {.haskell}
modF :: Functor f => (a -> f a) -> s -> f s
~~~

### First insight

But now, it turns out we can express other functions in terms of `modF`:

~~~ {.haskell}
type Lens' s a = forall f. Funtcor f => (a -> f a) -> s -> f s

lensToLensR :: Lens' s a -> LensR s a
lensRToLens :: LensR s a -> Lens' s a

set :: Lens' s a -> (a -> s -> s)
set ln a s = ?

newtype Identity a = Identity a
runIdentity :: Identity s -> s
runIdentity (Indentity x) = x

instance Functor Identity where
  fmap f = ...
~~~

`Identity` is a functor, so:

~~~ {.haskell}
set ln x s = 
  runIdentity (ln set_fld s)
  where
    set_fld :: a -> Identity a
    set_fld _ = Identity x
~~~

or, point-free:

~~~ {.haskell}
set ln x = runIdentity . ln (Identity . const x)
~~~

Now, `over` is very similar, it just doesn't discard value:

~~~ {.haskell}
over ln f = runIdentity . ln (Identity . f)
~~~

How about view?

~~~ {.haskell}
newtype Const v a = Const v

getConst :: Const v a -> v
getConst (Const x) = x

instance Functor (Const v) where
  fmap f (Const x) = Const x

view :: Lens' s a -> (s -> a)
view ln s = getConst (ln Const s)
~~~

Or, point-free:

~~~ {.haskell}
view ln = getConst . ln Const
~~~

`Const` is a bit of a strange functor, since it doesn't use the second type arg at all.

### How do we make a lens?

~~~ {.haskell}
data Person = P { _name :: Strng, _salary :: Int }

name elt_fn (P n s) = (\n' -> P n' s) <$> (elt_fn n)

let fred = P "Fred" 100
view name fred
set name "Bill" fred
~~~

Note: this is efficient, newtypes are free (no construction and deconstruction of Identity and Const values), getConst will be inlined.

### How do we compose lenses?

Simply:

~~~ {.haskell}
composeL = (.)
~~~

Making users aware of this leaks the abstraction, but that's the first time SPJ has seen a compelling reason for opening up the abstraction. (What is that reason?)

### Can we get rid of the boilerplate? 

~~~ {.haskell}
import Control.Lens.TH

$(makeLenses ''Person)
~~~

### More line noise

* `(.~)` = `set`

There is a lot of these symbols in the library.

### Not just nested records

~~~ {.haskell}
data Temp = T { _fahrenheit :: Float }

centigrade :: Lens Temp Float

data Time = T { _hours :: Int, _mins :: Int )

over mins (+ 4) now -- should roll the hour correctly, this can be encoded in the lens
                    -- note: it violates lens law which says we should get what we set

at :: Ord k => k -> Lens' (Map k v) (Maybe v) -- focuses on the value under given key

bitAt :: Int -> Lens' Int Bool -- gives access to particular bit of an int
~~~

Some of these are provided by the Lens library.

### Second insight

If we change `Functor` to `Applicative` we get a multi-focus lens!:

~~~ {.haskell}
data Address = A { _road :: String
                 , _city :: String
                 , _postcode :: String
                 }

addr_strs :: Traversal' Address String
addr_strs elt_fn (A r c p) = (\r' c' -> A r' c' p) <$> (elt_fn r) <*> (elt_fn c)

over :: Traversal' s a -> (a -> a) -> s -> s
over ln f = runIdentity . ln (Identity . f)
~~~

For this to work we just need `Identity` to be an instance of `Applicative` -- which it trivially is! `Const` can also be an `Applicative` if it is over a monoid.

This is an example of why having the type not abstract is good -- it opens up the possibility of sticking in other type classes. Also it allows us to write a lens without depending on lens library.

### This has all been a lie

or rather, a simplification; in fact the types are much more complex, the library contains 194 type synonyms.

### Q/A

* we will be able to have multiple records with the same field name (not related to lenses)


## Writing HLint with Uniplate

_Neil Mitchell_

Generics library allows us to split the code into two parts: dull and interesting.

* HLint -- Haskell linter, currently has about 400-500 rules
* Uniplate -- a generics library

HLint examples: remove unused language pragma, replace direct recursion with recursion schema (e.g. `foldr`) -- a code review tool.

How do we add a new hint?

Example:

instead of `mdo { Q; e}` write `do { rec Q; e }`

e.g.

~~~ {.haskell}
mdo x <- foo y
    y <- bar x
    return (x+y)

do rec x <- foo y
   y <- bar x
   return (x+y)
~~~

use `haskell-src-exts`

~~~ {.haskell}
renameMDo :: Exp -> Exp
removeMDo (MDo []) = Do []
removeMdo (MDo xs) = ...

parseFile :: FilePath -> IO (ParseResult Module)

Module ... [Decl]

onModule :: 

onDecl :: Dec -> Decl
~~~

lots of code to write for various cases such as `ClassDecl`, `InstDecl` -- 26 functions looking at 107 constructors

~~~ {.haskell}
import Data.Generics.Uniplate.Data

removeMDo :: Exp -> Exp
removeMDo (MDo []) = Do []
removeMDo (MDo xs) = ...
removeMDo x = x

onModule = transformBi removeMDo
~~~

that's all!

Generics library allows us to express a pattern and exceptions. Uniplate is one of the simplest generics libraries.

### Four patterns

~~~ {.asciiart}
         Query               Transform
Deep     universe            transform
         (find all)          (global replacement)
Shallow  children            descend
         (reduce to a value) (top-down with control)
~~~

~~~ {.haskell}
transform :: (on -> on) -> on -> on

lessParen :: Exp -> Exp
lessParen = transform f
  where f (Paren (Paren x)) = Paren x
        f (Paren (List x))  = List x
        f x                 = x
~~~

there are also monadic versions, `transformM` and `transformBiM`

~~~ {.haskell}
universe :: on -> [on]

redundantExtension :: Module -> Bool
redundantExtension m = 
  viewPats == 0 && "ViewPatterns" `elem` exts
  where
    viewPats = length[() | PViewPat{} <- universeBi m]
    exts = [prettyPrint x | LanguagePragma _ xs <- universeBi m, x <- xs]
~~~

~~~ {.haskell}
descend :: (on -> on) -> on -> on

eval :: Exp -> Exp
eval x = case x of
  Lambda{} -> x
  If c t f | prettyPrint c == "True" -> eval t
           | prettyPrint c == "False" -> eval f
  x -> descend eval x
~~~

~~~ {.haskell}
children :: on -> [on]

freeVars :: Exp -> [String]
freeVars (Var x) = [prettyPrint x]
freeVars (Lambda _ x bod) = freeBars bod \\ boundVars x
freeVars x = nub $ concatMap freeVars $ children x
~~~

### When to use?

If w have recursive type with >3 constructors, i.e. any AST, compiler etc.

### How is Uniplate implemented?

Simple!

~~~ {.haskell}
universe x = x : concatMap universse (children x)
transform f = f . descend (transform f)

class Uniplate on where
  uniplate :: on -> ([on],  -- children 
                     [on] -> on) -- a fn that puts the children together back into the parent

instance Uniplate Exp where
  uniplate (App x y) - ([x,y], \[x,y] -> Ap x y)
  ...

children = fst. uniplate
descend f x = gen $ map f cs
  where (cs, gen) = uniplate x
~~~

### Use in HLint

Decl has 27, Exp has 45, Pat has 23 constructors, and we never want to have cases for all of them.

Uniplate is 

* simple
* concise
* performant
* I'm the author!

### Correctness

143 hints have been proven correct with Isabell/HOCL? theorem prover

### Other uses of Uniplate

* NSIS -- windows installer, goto with fixed unmer of string reisters
* Haskell EDSL to restore sanity

As we generate NSIS from haskell, we get a lot of redundant stuff we want to optimise away

### Other Generics solutions

* GHC.Generics
* Data.Data
* Uniplate Direct
* Geniplate
* Lenses

## Fay -- Compiling Haskell to Javascript

_Adam Bergmark_

* from Silk
* very fat client -- more and more we see we don't want to write JavaScript. Wrote a couple of libraries for arrows etc., but it would be really nice to be able to e.g. use pipes and have static verification 
* Chris Done released Fay 0.1 in July 2012
* covers only a subset of Haskell

### Constraints and Goals

* it's important to be able to understand the output JavaScript (for debugging)
* needs to be compressable
* it should be possible to reuse JavaScript libraries such as jQuery
* we should be able to reuse code between server and client
* cabal needs to be supported
* it should be possible to call library compiled by Fay from plain JavaScript
* support by the major web frameworks

### Alternatives

* JavaScript
* CoffeeScript -- just solves the syntax problem, which is not the biggest issue
* TypeScript -- types, classes, better scoping rules, but typechecker has issues (_any_ type)
* Idris -- nice, but there is a lot of tooling that is missing (package manager etc.)
* GHCJS -- JS backend for GHC, supports almost all Haskell (why not this?)

### Tooling and Architecture

Initially:

* `haskell-src-exts`
* `haskell-suite`
* custom JS AST

Compiler passes:

* parsing (haskell-src-exts)
* desugaring (Fay)
* name resolution (haskell-names
* preprocessing 
* coge genration (Fay)
* optimisation (custom JS AST)
* printing (Fay)
* compression (Google Closure)

### FFI

transcodes functions and fay actions

~~~ {.haskell}
ffi :: String -> ?
~~~

e.g.:

~~~ {.haskell}
add :: Double -> Double -> Double
add = ffi "%1 + %2"
~~~

### Restrictions

* type classes are not supported in general
* but will be working pretty soon
* but when there is a value to dispatch on (e.g. as with `Show`), that will work

### Safe client-server communication

pipes between client and server

### Output

* keeps names the same
* compatible with Google Closure
* experimental work on source maps


## Monads for Free!

_Andres Loeh_

Everything is an (E)DSL. Even though some things don't look like a programming language at the first sight, they really benefit from that treatment.

Examples:

* parser combinators
* pretty-printing combinators
* music
* GPU computations

Hutton's Razor: minimal expression language

~~~ {.haskell}
data Expr = Lit Int | Add Expr Expr
~~~

Deep embedding: everything is represented as data. Very convenient! We can inspect and transform them. E.g.:

~~~ {.haskell}
eval :: Expr -> Int  -- evaluate
eval :: Expr -> String -- pretty print
~~~

How do we embed an imperative language? With shallow embedding, we can just use IO, e.g.:

~~~ {.haskell}
do
  say "Hello"
  name <- ask
  say ("Hello " ++ name)

say = putStrLn
ask = getLine
~~~

What if we wanted a deep embedding?

~~~ {.haskell}
data Interaction a
instance Monad Interaction

say :: String -> Interaction ()
ask :: Interaction String

data Interaction :: * -> * where
  Say :: String - Interaction ()
  Ask :: Interaction String
  Return :: a -> Interaction a
  Bid :: Interaction a -> (a -> Interaction b) -> Interaction b

instance Monad Interaction where
  return = Return
  (>>=) = Bind

run :: Interaction a -> IO a
~~~

That's pretty good, but this is not a proper monad as it does not abide by monad laws -- because we are wrapping everything in `Return`s and `Bind`s, so the results will be different if we e.g. wrap stuff in extra `Return`. We could argue that if the interpretation functions resolve this it's all fine, but it would be much nicer if we could guarantee that by construction.

Aside: why do we want laws? So that:

~~~ {.haskell}
do
  say "Tell!"
  something <- ask
  return something

do
  say "Tell"
  ask
~~~

behave the same. I.e. we meet the expectations of users of our language.

Monad laws actually say that every monadic computation can be normalised into a sequence of atomic steps:

~~~ {.haskell}
do
  x1 <- step1
  ..
  xn <- stepn
  return something
~~~

with one return at the end and atomic steps before. If we can define data type that represents that normal form we should be fine.

in our example the atomic steps were `Say` and `Ask`. We would like to restrict `Bind` to only take atomic action:

~~~ {.haskell}
say' msg = Bind (Say msg)
ask' = Bind Ask
~~~

We now don't need `Say`, `Ask` and `Bind`:

~~~ {.haskell}
data Interaction :: * -> * where
  Return :: a -> Interaction a
  Say'   :: String -> (() -> Interacdtion b) -> Interaction b
  Ask'   :: (String -> Interaction b) -> Interaction b
~~~

Note: we don't need GADT any more, but we'll still use the syntax as it reads nicely.

Is it still a monad?

~~~ {.haskell}
instance Monad Interaction where
  return = Return
  Return x   >>= f = f x
  Say' msg k >>= f = Say' msg ((>>= f) . k)
  Ask' k     >>= f = Ask' ((>>= f) . k)
~~~

this fulfills the monad laws. The interpreter is straightforward:

~~~ {.haskell}
run (Return x) = return x
run (Say' msg k) = putStrLn msg >>= run . k
run (Ask' k) = readLn >>= run . k
~~~

we can also write a different interpreter:

~~~ {.haskell}
simulate :: Interaction a -> [String] -> [String]
~~~

That's much better than having a shallow embedding that just runs in `IO`!

### Can this be generalised?

Abstracting from `Say` and `Ask`:

~~~ {.haskell}
data Interaction :: * -> * where
  Return :: a -> Interaction a
  Wrap :: InteractionOp a -> Interaction a

data InteractionOp :: * -> * where
  Say'   :: String -> (() -> Interacdtion b) -> Interaction b
  Ask'   :: (String -> Interaction b) -> Interaction b
~~~

but `b` is only used as param to `Interaction`, so it can be rewritten as:

~~~ {.haskell}
data Interaction :: * -> * where
  Return :: a -> Interaction a
  Wrap :: InteractionOp (Interaction a) -> Interaction a

data InteractionOp :: * -> * where
  Say'   :: String -> (() -> r) -> InteractionOp r
  Ask'   :: (String -> r) -> InteractionOp r
~~~

we can now parameterise `Interaction` further (and rename to `Free`):

~~~ {.haskell}
data Free :: (* -> *) -> * -> * where
  Return :: a -> Free f a
  Wrap :: f (Free f a) -> Free f a

data InteractionOp :: * -> * where
  Say'   :: String -> (() -> r) -> InteractionOp r
  Ask'   :: (String -> r) -> InteractionOp r
~~~

Now, `Free f` is a monad wherever `f` is a functor!

~~~ {.haskell}
instance Functor f => Monad (Free f) where
  return :: a -> Free f a
  return = Return

  (>>=) :: Free f a -> (a -> Free f b) -> Free f b
  Return x >>= f = f x
  Wrap c >>= f = Wrap (fmap (>>= f) c)
~~~

Is `InteractionOp` a functor?

~~~ {.haskell}
instance Functor InteractionOp where
-- ... yes
~~~

so

~~~ {.haskell}
type Interaction = Free InteractionOp
~~~

What have we achieved? Given a functor we get a monad for free!

### Examples

* `Free (Const Void)` is identity monad
* `Free (Const ())` is `Maybe`

~~~ {.haskell}
data ProcessF :: * -> * where
  Atomically :: IO a -> (a -> r) -> ProcessF r
  Fork :: Process () -> r -> ProcessF r

type Process = Free Process F

atomically :: IO a -> Process a
atomically m = Wrap (Atomically m Return)

fork :: Process () -> Process ()
fork p - Wrap (Fork p (Return ()))

-- we can define the scheduling however we want!
schedule :: [Process ()] -> IO ()
schedule [] = return ()
schedule (Return _:ps) = schedule ps
schedule (Wrap (Atomically m k):ps) = do 
                                        x <- m
--                                      ...
~~~

### Remarks

* Free monads can be generalised to monad transformers
* it might lead to inefficient representation (but you might specify other, more efficient implementation of `Free`)
* `free` package by Ed Kmett is the nicest one out there
* `operational` package takes a bit different approach
* applications: effects, parsing, coroutines, games, ...
* `IOspec`, `free-game` (OpenGL interpreter), `sunroof` (EDSL for JavaScript)
* other free structures, e.g. free applicatives (free monad is the largest monad over a functor that still fulfills monad laws)
* cofree comonads

## EDSLs at Scrive

_Gracjan Polak_

### JSON

initially just string concatenation, but it was unwieldy for conditional fields, so:

~~~ {.haskell}
json = genJSON $ do
  value "key1" 123
  object "key2" $ do
    value "key3" 555
  when flag $ do
    value "key4" 789
~~~

### Routing

Standard Happstack:

~~~ {.haskell}
router = choice
   [ dir "user" $ dir "login" handleLogin 
   , dir 'user" $ dir "logout" handleLogout
   ]
~~~

The same code can be run in a different monad that will check for duplicates and ambiguities.

Lessons:

* we usually want deep embedding
* usually easy to get from shallow ot deep embedding

### SQL

~~~ {.sql}
select title
from documents
where id = ?
  and author = ?
  and deleted = False
~~~

~~~ {.haskell}
sqlSelect "documents" $ do
  sqlResult "title"
  sqlWhereEq "id" docid
  sqlWhereEq "author" userid
  sqlWhereEq "deleted" False
~~~

it was easy to grow it to support `sqlOrderBy`, `sqlWhereExists` etc.

Bonus: we can generate diagnostic queries from this; e.g. a query that checks which of the conditions evaluated to false.
