

Tryb ewaluacji, ktory gwarantuje, że ewaluacja wyrażenia się zakończy o ile tylko lewniwa ewaluacja tego wyrażenia się kończy. W przeciwienstwie do [lazy evaluation]() nie gwarantuje natomiast minimalnej liczby redukcji. 

Np. 

~~~ { .haskell }
let x = infinite_loop () 
    y = other_call () 
in 0 
~~~
W trybie non-strict ta funkcja zakonczy sie i da 0 -- choc nie ma gwarancji, czy np. `other_call ()` sie nie wykona. 

[Haskell]() jest jezykiem non-strict.