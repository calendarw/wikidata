~~~ {.clojure}
(ns overtone.core)

(use 'overtone.live)

;; simple ugen
(definst foo [] (saw 110))
(foo)

;; changing parameters on the fly with ctl
(definst quux [freq 440] (* 0.3 (saw freq)))
(quux)
(ctl quux :freq 660)

(definst trem [freq 440 depth 10 rate 6 length 3]
  (* 0.3
     (line:kr 0 1 length FREE)
     (saw (+ freq (* depth (sin-osc:kr rate))))))
(trem)

;; show doc for line:kr
(odoc line:kr)

;; panning
(odoc pan2)

(definst leftsaw []
	(pan2 (saw 220) -1))
(leftsaw)

(definst spooky-house [freq 440 width 0.2 
                         attack 0.3 sustain 4 release 0.3 
                         vol 0.4] 
  (* (env-gen (lin-env attack sustain release) 1 1 0 1 FREE)
     (sin-osc (+ freq (* 20 (lf-pulse:kr 0.5 0 width))))
     vol))
(spooky-house)

;; mouse controlling parameters of ugens
(demo 10 (lpf (saw 100) (mouse-x 40 5000 EXP)))

;; samples
(def kick (sample "/home/mmakowski/Music/samples/drums/777__vitriolix__808-kick.wav"))
(kick)

;; sample buffers allow to use samples as signal generators in more complex synthesis, 
;; and view the waveform
(def kick-buf (load-sample "/home/mmakowski/Music/samples/drums/777__vitriolix__808-kick.wav"))
(scope :buf kick-buf)
(defsynth reverb-on-left []
  (let [dry (play-buf 1 kick-buf)
	    wet (free-verb dry 1)]
    (out 0 [wet dry])))
(reverb-on-left)

;; samples from freesound.org
(def snare (sample (freesound-path 26903))) 
(def water-drops (sample (freesound-path 50623))) 
(def close-hat (sample (freesound-path 802))) 
(def open-hat (sample (freesound-path 26657))) 
(snare)
(water-drops)
(close-hat)
(open-hat)

(stop)
~~~
