

Mechanizm synchronizacji w programowaniu wspolbieznym, bardzo obiecujacy, gdyz wydaje sie byc prostszy w stosowaniu niz standardowe blokady (locks). Polega na wykonywaniu sekwencji operacji w sposob atomowy (powszechna notacja: `atomic { op1; op2 ... }`). W typowej implementacji kazda transakcja prowadzi dziennik dostepow do pamieci i przy commicie sprawdza, czy dziennik jest spojny z tym, co aktualnie jest w pamieci. Jesli nie, wykonuje rollback. 

Implementuje sie albo software'owo (STM), albo na poziomie hardware'u. 

Duzy wplyw na rozwoj mial artykul Peyton-Jonesa et. al, ktorego przeredagowana wersja umieszczona zostala w CACM 08/08. W przystepny sposob opisuje on implementacje STM w [Haskellu](Haskell). Pokazuje, jak czysto funkcyjny jezyk z efektami ubocznymi obslugiwanymi przy pomocy monad pozwala elegancko implementowac STM. Prezentuja tam tez konstrukcje takie jak `retry` czy `orElse`, pozwalajace na skladanie pojedynczych operacji STM w wieksza calosc -- cos, co w przypadku stosowania blokad nie jest mozliwe.