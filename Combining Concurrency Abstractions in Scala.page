2012-12-12, Philipp Haller

## The problem

* we mix actors, futures, threads, latches...
* poor tool support for diagnosing concurrency issues

## Actors + X

### X = futures

#### State Capture

~~~ { .scala }
var state = 0

def receive = {
  case Request(x) => future {
    handleRequest(x, state) // 1. race condition between this and ChangeState
                            // 2. state is not correctly published for transfer between threads
  }
  case ChangeState(newState) =>
    state = newState
}
~~~

How do we fix it?

~~~ { .scala }
  case Request(x) => 
    // recommended pattern: store all state for the future in vals
    val currentState = state
    future {
      handleRequest(x, currentState)
    }
~~~

#### Sender Capture

~~~ { .scala }
def receive = {
  case Request(x) => future {
    val res = handleRequest(x)
    sender ! Response(res) // sender might have changed by the time we send response
  }
}
~~~

Solution:

we can capture the sender before forking off future, but there is also another pattern:

~~~ { .scala }
def receive = {
  case Request(x) => future {
    val res = handleRequest(x)
    Response(res)
  } pipeTo sender
}
~~~
