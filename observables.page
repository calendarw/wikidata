---
categories: programming scala reactive_programming
...

An asynchronous version of `Iterable`, similarly to how `Future` is an asynchronous version of `Try`.

~~~ {.scala}
trait Observable[T] {
  def subscribe(observe: Observer[T]): Subscription
}

trait Observer[T] {
  def onNext(value: T): Unit
  def onError(error: Throwable): Unit
  def onCompleted(): Unit
}

trait Subscription {
  def unsubscribe(): Unit
}

~~~

## Refernces

* Reactive Programming Coursera courese [lecture](https://class.coursera.org/reactive-001/lecture/61)