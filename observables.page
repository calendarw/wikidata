---
categories: programming scala reactive_programming rx
...

An asynchronous version of `Iterable`, similarly to how `Future` is an asynchronous version of `Try`.

~~~ {.scala}
trait Observable[T] {
  def subscribe(observe: Observer[T]): Subscription
}

trait Observer[T] {
  def onNext(value: T): Unit
  def onError(error: Throwable): Unit
  def onCompleted(): Unit
}

trait Subscription {
  def unsubscribe(): Unit
}

~~~

## Composition

### `flatten`

~~~ {.scala}
def flatten: Observable[Observable[T]] => Observable[T]
~~~

Merges nested observables on first-come-firs-served basis -- i.e. can result in reordering the top-level observable.

### `concat`

~~~ {.scala}
def concat: Observable[Observable[T]] => Observable[T]
~~~

Concatenates nested observables preserving the order of top-level observable. The downside is that it might need to buffer potentially unbounded prefixes of observables that are further down in the top level sequence, if they produce results quicker than the first observable.

## Subscriptions

There are two types of observables: 

* *hot* -- ones that run independently of whether anyone observes them; e.g. the mouse moves
* *cold* -- ones that only make sense if someone observes them; e.g. a stream of earthquake data coming from a web service

*Unsubscribing* leaves the observable running, *cancellation* cancels the source observable so that all other subscribers will stop receiving notifications.

## Subjects

`Subject` is to `Observable` like `Promise` is to a `Future`. It creates a channel by wrapping an `Observer` (input) and `Observable` output such that the callbacks on the observer cause firing of events on the observable. The difference in the interface is that a `Subject` *is* an `Observable` os unlike with `Promise` where we needed to say `promise.future` to get hold of the producer end, we can just refer to subject directly.

Subjects make cold observables hot.

Types of subjects:

* publish subject -- always sends out the current value
* replay subject -- caches and sends all values since the beginning on every subscription
* async subject -- caches and sends the final value to every subscription
* behaviour subject -- caches and sends the latest value to every subscription

## Blocking

`toBlockingObservable` or `BlockingObservable.from`. Blocking observable can be converted to list or , if we know it produces exactly one element, to that element, so to debug we can do: 

~~~ {.scala}
multiObservable.toBlockingObservable.toList
singleObservable.toBlockingObservable.single
~~~

## References

* Reactive Programming Coursera courese [lecture](https://class.coursera.org/reactive-001/lecture/61)