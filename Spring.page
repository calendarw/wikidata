
## Namespace resolution in context XML

Spring config can be extended with custom elements -- see [Appendix D](http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/extensible-xml.html) of the docs. Spring does not normally download XSDs from the web but looks for all `META-INF/spring.schemas` files on classpath and from them extracts mappings from URLs to classpath locations. E.g. if we use the following namespaces:

~~~ { .xml }
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:crypto="http://www.hsbc.com/schema/esf-data-crypto-1.0.0"
       xsi:schemaLocation="http://www.springframework.org/schema/beans      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.hsbc.com/schema/esf-data-crypto-1.0.0 http://www.hsbc.com/schema/esf-data-crypto-1.0.0/data-crypto-config.xsd">
~~~

And classpath contains `META-INF/spring.schemas` with the following:

~~~
http\://www.hsbc.com/schema/esf-data-crypto-1.0.0/data-crypto-config.xsd=data-crypto-config.xsd
~~~

Then spring will use `data-crypto-config.xsd` from classpath for the `xmlns:crypto` schema.

## Multiple property placeholder configurers

When multiple `context:property-placeholder` entries are used in different XML files assembled into a single context, each of these entries needs to have `ignore-unresolvable` set to `true`:

~~~
<context:property-placeholder location="classpath:config/h2.properties" 
                              system-properties-mode="OVERRIDE"
                              ignore-unresolvable="true"/>
~~~
