A very clear derivation of `fix` in Haskell is in [http://www.vex.net/~trebla/haskell/fix.xhtml](). An exercise after it:

~~~
Prelude Data.Function> let fac n = if n == 0 then 1 else n * fac (n - 1)
Prelude Data.Function> let fac = \n -> if n == 0 then 1 else n * fac (n - 1)
Prelude Data.Function> -- we can treat the body of `fac` as some function that takes `fac` as an argument:
Prelude Data.Function> let fac = (\fac' -> \n -> if n == 0 then 1 else n * fac' (n - 1)) fac
Prelude Data.Function> :t fac
fac :: Integer -> Integer
Prelude Data.Function> -- the pattern `let x = f x in x` is captured by `fix` function:
Prelude Data.Function> let fac = fix (\fac' -> \n -> if n == 0 then 1 else n * fac' (n - 1))
Prelude Data.Function> :t fac
fac :: Integer -> Integer
Prelude Data.Function> fac 3
6
~~~

So, any recursive function definition can be transformed to an application of `fix` by wrapping it in additional lambda abstraction that takes the function being defined, and then applying `fix` to the new, wrapped function. However, this seems pointless. So, what is the real use of `fix`?


