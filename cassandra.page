---
categories: it database nosql
...

All writes are timestamped at the client and later overwrite (upsert) on top of the former, so [requires clocks to be synchronised on all clients](http://www.datastax.com/documentation/cassandra/2.0/webhelp/index.html#cassandra/dml/dml_about_inserts_c.html#concept_ds_xvr_knw_zj).

Does not support range scans.

## Benchmark

Writing 100m small rows (5 cols, char(1)/bigint/decimal/timestamp) rows to an unindexed table on an SSD:

* 9 GB (8 GB not counting commit logs and saved caches) on disk
* 4h 51m

`select count(*) from postings limit 100000000;` after the writes described above took ~10 mins to return.

`create index account_idx on postings (account_id)` is asynchronous -- kicks off indexing in the background. Took over 8 hours, the index added 3 GB to disk usage.

## Usage

* [Instagram](http://planetcassandra.org/blog/post/instagram-making-the-switch-to-cassandra-from-redis-75-instasavings): auditing data, 12-node cluster of extra large EC2 instances, storing 1.2 TB across the cluster, peak writes 20k/s, reads 15k/s.

## References

* DataStax 2.0 [docs](http://www.datastax.com/documentation/cassandra/2.0/webhelp/)
* [Blog post](http://bigdatanoob.blogspot.co.uk/2012/11/hbase-vs-cassandra.html) comparing Cassandra and HBase