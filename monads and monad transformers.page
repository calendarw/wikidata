====== Monads and monad transformes ======

//notes from Haskell Hoodlums session in April 2012//

- took Peter a year to understand

kinds:
<code>
Int ::: *
[]  ::: * -> *
Map ::: * -> * -> *
</code>

only types of kind * are populated

<code haskell>
data Foo f a = Foo ((f a) -> a)
Foo ::: (* -> *) -> * -> *
</code>

type classes -- like Java interfaces. Specify signatures, but also imply (unchecked) behaviour (laws)

allow to have a common abstraction of a certain behaviour for various types

=== Functor ===

class Functor f where
  fmap :: (a -> b) -> f a -> f b

laws:
* identity
* composition

=== Applicative ===

<code haskell>
class (Functor f) => Applicative f where
  pure  :: a -> f a
  (<*>) :: f (a -> b) -> f a -> f b

(<$>) = fmap
</code>

laws:
* identity
* coposition
* homomorphism
* interchange
* fmap

choosing the implementation (e.g. ZipList vs. cross-product): newtype ZipList a = ZipList { getZipList :: [a] }

example of Functor that is not Applicative: Map String (how would we implement pure?)

=== Alternative ===

moverride <|> lookup k dict <|> mdefault
parseDate <|> parseNumber   <|> parseString

class Appliative f => Alternative f where
  empty :: f a
  (<|>) :: f a -> f a -> f a

laws:
* identity
* associativity

=== Monoid ===

Appending:

[1,2] ++ [3, 4] ++ [5, 6]
1 + 2 + 3 + 4 + 5
1 * 2 * 3 * 4 * 5

class Monoid a where
  mempty  :: a
  mappend :: a -> a -> a
  mconcat :: [a] -> a

instance Monoid [a] where
  mempty = []
  mappend = (++)

laws:
* identity
* associativity

=== Why these particular names? ===

two dimensions:

concrete <--> abstract
common   <--> precise

the audience for haskell were computer scientists and mathematicians, so very abstract and very precise words were chosen.

=== Monad ===

Propagating failure:

case lookup n people of
  Nothing -> Nothing
  Just p  ->
    case employer p of
      Nothing -> Nothing
      Just e  -> Just (name e)

Collecting output:

eval :: Term -> (Int, [Log])
eval (Const x) = (x, [])
eval (Add l r) =
  let (l', lls) = eval l
      (r', rls) = eval r
  in  (l' + r', lls ++ rls ++ [LogAdd l', r'])
eval (Mul l r) = ...

class Monad m where
  return :: a -> m a
  (>>=)  :: m a -> (a -> m b) -> m b

(>>)
(>=>) :: (a -> m b) -> (b -> m c) (a -> m c) -- Kelisli composition (easier to understand than (>>=)!)
join
ap

laws:
* left identity
* right identity
* associativity
-- again, easiest explained using Kleisli

now:

lookup n people >>= \p ->
employer p      >>= \e ->
return (name e)

or:

do
  p <- lookup n people
  e <- employer p
  return (name e)

and we can use Writer monad for logging:

eval :: Term -> Writer [Log] Int
eval (Const x) = return x
eval (Add l r) = do
  l' <- eval l
  r' <- eval r
  tell [LogAdd l' r']
  return (l' + r')
eval (Mul l r) = ...

=== MonadPlus ===

class Monad m => MonadPlus m where
  mzero :: m a
  mplus :: m a -> m a -> m a

laws:
* left identity
* right identity
* associativity

-- the same as Alternative

=== Calculator example ===

data Op = AC | Add Double | Sub Double | ...

type Calc a = ...

instance Monad Calc where ...

input = [Add 3, Mul 5, MemPPlus, Ac, Add 2, MemPlus ...]

main = print (riunCalc (foldM calc 0 input))

calc :: Double -> Op -> Calc Double
calc _ AC       = return 0
calc a (Add n ) = return (a + n)
calc _ (Div 0)  = mzero
calc a (Div n ) = return (a / n)
calc a MemPlus  = modify (+ a) >> return a
calc a SubTot   = tell [a] >> return a

what does runCalc do?

common things to do:
* operations which may fail (division)
* writing (subtotals)
* modifying state (memory)

how do we build the monad stack to handle it?

Maybe -- for handling failure
Writer [Double] -- for recording the list of subtotals
StateT ::: * -> (* -> *) -> * -- for memory

type Calc a = StateT Double (WriterT [Double] Maybe) a

runCalc :: Calc Double -> Maybe (Double, [Double])
runCalc c = runWriterT (evalStateT c 0)

=== Monad Transformer Library (MTL) ===

newtype ReaderT r m a = ReaderT { runReaderT :: r -> m a }

class (Monad m) => MonadReader r m | m -> r where
  ask   :: m r
  local :: (r -> r) -> m a -> m a

we can use these operations whenever we have ReaderT **anywhere** in our stack!

WriterT w m a
- tell
- listen
- pass

w must be a monoid, m a monad

StateT s m a
- get
- put

Writer and Reader are specialisations of State

ErrorT e m a
- throwError
- catchError

TODO:
understand run???T

* all transformers are instances of all these ?Monad classes
* every transformer has a non-transformer version if we want to run without wrappers
* need to run in the reverse order of the stack

if we have a code that says:

WriterMonad m => ....

that code will work on any stack that has WriterT in it

What's the behavioural diff between

WriterT String (Either String) Int
ErrorT  String (Writer String) Int

the first one will throw away what's been written when there is an error
the second will provide the value together with error
it's rare to need to write your own monad instances -- usually you can get what you want by building on top of MTL

one of the best referenes: Monads for Functional programming, Wadler