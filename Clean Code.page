(book by Robert C. Martin et al.)

## Agreements

* functions should do one thing, be short and focused
* avoid duplication
* comments compensate for failure of expressing ideas clearly in code; extract appropriately named functions instead of commenting
* avoid noise
* use version control system in preference to keeping the history in the source code
* top-down order of functions (caller above callee)

### Quotes

Below are quotes that back up some of my coding heuristics.

On mandated comments:
accentuates that 
_It is just plain silly to have a rule that says that every function must have a javadoc, or every variable must have a comment. Comments like this just clutter up the code, propagate lies, and lend to general confusion and disorganization._

## Objections

The first chapter makes it clear that the rules laid out in the book should be taken in a similar vain as teachings of martial arts masters, who each have their own school and no single one is absolutly right or best. Many of my objections might result from this approach to teaching about programming. My concerns might be summarised in that telling the students they are not competent enough to judge what the best way to approach a given problem is and that they should be following a set of rules does more damage that good.

Many of the rules in the book only really apply to Java, or a very similar object-oriented language. This assumption has not been stated in the opening chapters.

### Naming

The entire chapter is written as a series of rules, usually with little or no justification. Some specific objections:

* _method names should be verbs_ -- I prefer names that read well at the call site. Combined with  referential transparency this usually results in names that are nouns, e.g. `trait.mixedInto(class)` instead of `trait.mixInto(class)`.

### Functions

* _consider, for instance, the `StringBuffer` in the example. We could have passed it around as an argument rather than making it an instance variable, but then our readers would have had to interpret it each time they saw it_ -- I don't buy the argument that it's better for code comprehension to stick something in class state rather than pass it to wherever it is needed.

### Formatting

* _[with variable list with horizontally aligned names] you are tempted to read down the list of variable names without looking at their types_ -- with well named variables the types are not as important on first reading. Even more helpful is the horizontal alignment of a series of assignments, where the alignment strenghtens the impression that all of the operations in the list are of the same kind, and all that matters is what's on the left and what's on the right side.

* _Whenever I have succumbed to this [putting short methods and block bodies on a single line], I have almost always gone back and put the indentation back in_ -- It would have been more convincing if it was backed by some analysis as to why.

## Other Remarks

Chapter 6 introduces a distinction between objects and data structures and proposes usage of one or the other depending on whether we expect the functions or data types to change -- a way to tackle the [expression problem]().
